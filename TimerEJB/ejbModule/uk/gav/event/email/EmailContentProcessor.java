package uk.gav.event.email;

import java.util.GregorianCalendar;
import java.util.regex.Pattern;

import uk.gav.event.ContentProcessor;
import uk.gav.event.EventEntity;

/**
 * 
 * @author gavin
 *
 * Provide the specific template processing for email events
 */
public class EmailContentProcessor extends ContentProcessor {

	/**
	 * The regular expression of the strings to replace in the template
	 */
	private final static String  patternString = "%%.*?%%";
	
	/**
	 * The compiled pattern
	 */
	private final static Pattern repPattern = Pattern.compile(patternString);
	
	/**
	 * The event content that will be the subject of this processor
	 */
	private EventEmailContent cont;
		
	public static void main(String[] args) {
		EmailContentProcessor processor = new EmailContentProcessor();
		EventEntity ee = new EventEntity();
		ee.setEventContent("{\"to\":\"gavlad@bad.com\",\"subject\":\"Lav It\", \"contentType\":\"one\",\"version\":1.0}");
		EventEmailContent eec = new EventEmailContent(ee);
		eec.setTo(new String[] {"gav@lad.com"});
		processor.setEventEmailContent(eec);
		processor.processContent("Hello %%to%%\nHow are you doing. This email was generated by GEN :-) on %%today%%\n");
	}
	
	public EmailContentProcessor() {
		this.setReplacementRegEx(repPattern);
	}
	
	public void setEventEmailContent(EventEmailContent cont) {
		this.cont = cont;
	}
	
	/**
	 * Will replace the text identified by the regular expression parse of the superclass.
	 */
	@Override
	protected String replaceField(String regEx) {
		String output = regEx;
		if ("%%to%%".equals(regEx)) {
			if (cont != null) {
				output =  cont.getTo()[0];
			}
		}
		else if ("%%today%%".equals(regEx)) {
			output = GregorianCalendar.getInstance().getTime().toString();
		}
		
		return output;
	}

}
